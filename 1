import streamlit as st
import requests
import base64
import io
from PIL import Image
import pandas as pd
import logging
import csv

# 로깅 설정
logging.basicConfig(level=logging.INFO)

# Ollama 서버 주소
OLLAMA_HOST = 'http://localhost:11434'

def query_ollama_ocr(image_data, model="gemma3:4b"):
    """Ollama API를 사용하여 이미지에서 텍스트와 테이블을 추출"""
    prompt = """
    Extract all tables from this image in CSV format.
    First row should be headers.
    If there are multiple tables, separate them with "----TABLE_SEPARATOR----".
    If no tables are present, return any text found in the image, clearly labeled as 'Extracted Text:'.
    Do not include any additional explanations unless necessary to understand the context of the extracted text.
    """
    data = {
        "model": model,
        "prompt": prompt,
        "stream": False,
        "images": [image_data],
        "format": "json",
        "options": {
            "temperature": 0.0,
            "top_p": 0.9,
        }
    }
    try:
        response = requests.post(f"{OLLAMA_HOST}/api/generate", json=data, timeout=240)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"Ollama Request Error: {e}")
        return {"error": f"Ollama API 요청 오류: {e}"}

def parse_csv_tables(text):
    """텍스트에서 CSV 테이블을 분리하고 Pandas DataFrame으로 변환"""
    table_separator = "----TABLE_SEPARATOR----"
    if table_separator in text:
        csv_strings = text.split(table_separator)
        tables = []
        for csv_string in csv_strings:
            csv_string = csv_string.strip()
            if csv_string:
                try:
                    df = pd.read_csv(io.StringIO(csv_string), encoding='utf-8', quotechar='"', quoting=csv.QUOTE_MINIMAL, skipinitialspace=True)
                    tables.append(df)
                except Exception as e:
                    logging.warning(f"CSV 파싱 경고: {e}")
                    tables.append(csv_string)  # 파싱 실패 시 원본 텍스트 추가
        return tables
    else:
        return [text] # 테이블이 없을 경우, 전체 텍스트를 리스트에 담아 반환

def main():
    st.set_page_config(layout="wide")
    st.title("AI 문서 OCR 서비스 (Ollama) - 표 데이터 추출")
    st.write("JPG, PNG 이미지를 업로드하여 문서 내용을 추출합니다. (표 데이터 추출을 지원합니다.)")

    uploaded_file = st.file_uploader("문서 이미지를 업로드하세요 (JPG, PNG).", type=["jpg", "jpeg", "png"])
    model_options = ["gemma3:4b", "granite3.2-vision"]
    selected_model = st.selectbox("사용할 모델을 선택하세요:", model_options, index=0)

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption="업로드된 이미지", use_container_width=True)
        buffered = io.BytesIO()
        image.save(buffered, format="JPEG")
        img_str = base64.b64encode(buffered.getvalue()).decode()

        with st.spinner("문서 내용 추출 중..."):
            try:
                ollama_response = query_ollama_ocr(img_str, model=selected_model)
                if "error" in ollama_response:
                    st.error("Ollama 오류: " + ollama_response["error"])
                else:
                    extracted_text = ollama_response['response']
                    parsed_data = parse_csv_tables(extracted_text)

                    if parsed_data:
                         # 테이블과 텍스트를 순차적으로 표시
                        for item in parsed_data:
                            if isinstance(item, pd.DataFrame):
                                st.subheader("추출된 테이블")
                                st.dataframe(item)
                                csv_data = item.to_csv(index=False, encoding='utf-8-sig').encode('utf-8')
                                st.download_button(
                                    label="CSV 파일로 다운로드",
                                    data=csv_data,
                                    file_name="table.csv",
                                    mime="text/csv",
                                )
                            else:
                                # 테이블이 아닌 경우, 텍스트로 처리
                                if item.startswith("Extracted Text:"):
                                    st.subheader("추출된 텍스트")
                                    st.text(item.replace("Extracted Text:", "").strip())
                                else:
                                     st.text(item) #일반 텍스트
                    else:
                        st.write("추출된 내용이 없습니다.")

            except requests.exceptions.RequestException as e:
                st.error(f"Ollama 서버 연결 오류: {e}")
            except Exception as e:
                st.error(f"오류 발생: {e}")

if __name__ == "__main__":
    main()
